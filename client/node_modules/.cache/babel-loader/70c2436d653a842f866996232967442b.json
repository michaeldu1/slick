{"ast":null,"code":"var _jsxFileName = \"/Users/michaeldu/FullStackTutorial/client/src/components/UploadPostModal.js\";\nimport React, { Component } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addItem } from '../actions/itemActions';\nimport ImageUploader from 'react-images-upload';\n\nconst fs = require('fs');\n\nconst uploadedImage = React.useRef(null);\nconst imageUploader = null;\n\nconst handleImageUpload = e => {\n  console.log(\"called\");\n  const [file] = e.target.files;\n  console.log(\"file\", file);\n\n  if (file) {\n    const reader = new FileReader();\n    const {\n      current\n    } = uploadedImage;\n    current.file = file;\n\n    reader.onload = e => {\n      current.src = e.target.result;\n    };\n\n    console.log(reader.readAsDataURL(file));\n  }\n};\n\nclass ItemModal extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = () => {\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.onDrop = picture => {\n      var reader = new FileReader();\n\n      reader.onloadend = function () {\n        console.log(reader.result);\n      };\n\n      console.log(picture.type); // console.log(reader.readAsDataURL(picture));\n      // console.log(reader)\n      // console.log(\"pic\", picture)\n\n      this.setState({\n        pictures: this.state.pictures.concat(Buffer.from(picture))\n      });\n    };\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      const newItem = {\n        name: this.state.name,\n        img: this.state.pictures[0]\n      }; // add item via add item action\n\n      this.props.addItem(newItem); // close modal\n\n      this.toggle();\n    };\n\n    this.state = {\n      modal: false,\n      name: '',\n      pictures: []\n    };\n    this.onDrop = this.onDrop.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 5\n      }\n    }, this.props.isAuthenticated ? /*#__PURE__*/React.createElement(Button, {\n      color: \"dark\",\n      style: {\n        marginBottom: '2rem'\n      },\n      onClick: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }\n    }, \"Share your cut!\") : /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"mb-3 ml-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }, \"Feed\"), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    }, \"Upload Post\"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: handleImageUpload,\n      ref: imageUploader,\n      style: {\n        display: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        height: \"60px\",\n        width: \"60px\",\n        border: \"1px dashed black\"\n      },\n      onClick: () => imageUploader.current.click(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      ref: uploadedImage,\n      style: {\n        width: \"100%\",\n        height: \"100%\",\n        position: \"acsolute\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }\n    })), \"Click to upload Image\"), /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 10\n      }\n    }, \"Description\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"name\",\n      id: \"item\",\n      placeholder: \"Clipper length, color, style, etc.\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      color: \"dark\",\n      style: {\n        marginTop: '2rem'\n      },\n      block: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 10\n      }\n    }, \"Post\"))))));\n  }\n\n}\n\nItemModal.propTypes = {\n  isAuthenticated: PropTypes.bool\n};\n\nconst mapStateToProps = state => ({\n  item: state.item,\n  isAuthenticated: state.auth.isAuthenticated\n});\n\nexport default connect(mapStateToProps, {\n  addItem\n})(ItemModal);","map":{"version":3,"sources":["/Users/michaeldu/FullStackTutorial/client/src/components/UploadPostModal.js"],"names":["React","Component","Button","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","Input","PropTypes","connect","addItem","ImageUploader","fs","require","uploadedImage","useRef","imageUploader","handleImageUpload","e","console","log","file","target","files","reader","FileReader","current","onload","src","result","readAsDataURL","ItemModal","constructor","props","toggle","setState","modal","state","onDrop","picture","onloadend","type","pictures","concat","Buffer","from","onChange","name","value","onSubmit","preventDefault","newItem","img","bind","render","isAuthenticated","marginBottom","display","flexDirection","alignItems","justifyContent","height","width","border","click","position","marginTop","propTypes","bool","mapStateToProps","item","auth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    Form,\n    FormGroup, \n    Label,\n    Input\n} from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addItem } from '../actions/itemActions';\nimport ImageUploader from 'react-images-upload';\nconst fs = require('fs');\nconst uploadedImage = React.useRef(null);\nconst imageUploader = null;\n\nconst handleImageUpload = e => {\n\tconsole.log(\"called\")\n\tconst [file] = e.target.files;\n\tconsole.log(\"file\", file)\n\tif (file) {\n\t\tconst reader = new FileReader();\n\t\tconst { current } = uploadedImage;\n\t\tcurrent.file = file;\n\t\treader.onload = e => {\n\t\t\tcurrent.src = e.target.result;\n\t\t};\n\t\tconsole.log(reader.readAsDataURL(file));\n\t}\n};\n\n\n\nclass ItemModal extends Component {\n\t\tconstructor(props) {\n\t\t\tsuper(props);\n\t\t\tthis.state = {\n\t\t\t\tmodal: false,\n\t\t\t\tname: '',\n\t\t\t\tpictures: []\n\t\t\t}\n\t\t\tthis.onDrop = this.onDrop.bind(this);\n\t\t}\n\t\t\n\t\tstatic propTypes = {\n\t\t\tisAuthenticated: PropTypes.bool\n\t\t}\n\n    toggle = () => {\n\t\t\tthis.setState({\n\t\t\t\t\tmodal: !this.state.modal\n\t\t\t});\n\t\t}\n\t\t\n\t\tonDrop = (picture) => {\n\t\t\tvar reader  = new FileReader();\n\n\t\t\treader.onloadend = function () {\n\t\t\t\tconsole.log(reader.result);\n\t\t\t}\n\t\t\tconsole.log(picture.type)\n\t\t\t// console.log(reader.readAsDataURL(picture));\n\t\t\t// console.log(reader)\n\t\t\t// console.log(\"pic\", picture)\n\t\t\tthis.setState({\n\t\t\t\tpictures: this.state.pictures.concat(Buffer.from(picture))\n\t\t\t});\n\t\t}\n\n    onChange = (e) => {\n      this.setState({[e.target.name]: e.target.value})\n    }\n\n    onSubmit = (e) => {\n\t\t\te.preventDefault();\n\t\t\tconst newItem = {\n\t\t\t\t\tname: this.state.name,\n\t\t\t\t\timg: this.state.pictures[0]\n\t\t\t}\n\n\t\t\t// add item via add item action\n\t\t\tthis.props.addItem(newItem);\n\n\t\t\t// close modal\n\t\t\tthis.toggle();\n\t\t}\n\t\n    render(){\n\t\t\treturn(\n\t\t\t\t<div>\n\t\t\t\t\t{ this.props.isAuthenticated ? \t\t\t\t\t\n\t\t\t\t\t\t<Button color=\"dark\" style={{marginBottom: '2rem'}} onClick={this.toggle}> \n\t\t\t\t\t\t\tShare your cut!\n\t\t\t\t\t\t</Button> :\n\t\t\t\t\t\t<h4 className=\"mb-3 ml-4\">\n\t\t\t\t\t\t\tFeed\n\t\t\t\t\t\t</h4>\n\t\t\t\t\t}\n\n\t\t\t\t\t<Modal isOpen={this.state.modal} toggle={this.toggle} >\n\t\t\t\t\t\t<ModalHeader toggle={this.toggle}>Upload Post</ModalHeader>\n\t\t\t\t\t\t<ModalBody>\n\t\t\t\t\t\t\t{/* <ImageUploader\n\t\t\t\t\t\t\t\t\twithIcon={true}\n\t\t\t\t\t\t\t\t\tbuttonText='Choose images'\n\t\t\t\t\t\t\t\t\tonChange={this.onDrop}\n\t\t\t\t\t\t\t\t\timgExtension={['.jpg', '.gif', '.png', '.gif']}\n\t\t\t\t\t\t\t\t\tmaxFileSize={5242880}\n\t\t\t\t\t\t\t/> */}\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      }}\n    >\n      <input\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={handleImageUpload}\n        ref={imageUploader}\n        style={{\n          display: \"none\"\n        }}\n      />\n      <div\n        style={{\n          height: \"60px\",\n          width: \"60px\",\n          border: \"1px dashed black\"\n        }}\n        onClick={() => imageUploader.current.click()}\n      >\n        <img\n          ref={uploadedImage}\n          style={{\n            width: \"100%\",\n            height: \"100%\",\n            position: \"acsolute\"\n          }}\n        />\n      </div>\n      Click to upload Image\n    </div>\n\t\t\t\t\t\t\t<Form onSubmit={this.onSubmit}>\n\t\t\t\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t\t\t\t<Label for=\"item\"> \n\t\t\t\t\t\t\t\t\t\tDescription\n\t\t\t\t\t\t\t\t\t</Label>\n\t\t\t\t\t\t\t\t\t<Input type=\"text\" name=\"name\" id=\"item\" placeholder=\"Clipper length, color, style, etc.\" onChange={this.onChange}/>\n\t\t\t\t\t\t\t\t\t<Button color=\"dark\" style={{marginTop: '2rem'}} block >\n\t\t\t\t\t\t\t\t\t\tPost\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t</ModalBody>\n\t\t\t\t\t</Modal>\n\t\t\t\t</div>\n\t\t\t);\n    }\n}\nconst mapStateToProps = state => ({\n\t\titem: state.item,\n\t\tisAuthenticated: state.auth.isAuthenticated\n})\n\nexport default connect(mapStateToProps, { addItem })(ItemModal)"]},"metadata":{},"sourceType":"module"}
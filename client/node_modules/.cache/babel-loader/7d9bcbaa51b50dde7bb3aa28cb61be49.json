{"ast":null,"code":"var _jsxFileName = \"/Users/michaeldu/FullStackTutorial/client/src/components/UploadPostModal.js\";\nimport React, { Component } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addItem } from '../actions/itemActions'; // import ImageUploader from 'react-images-upload';\n\nconst fs = require('fs');\n\nclass ItemModal extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = () => {\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.onDrop = picture => {\n      var reader = new FileReader();\n\n      reader.onloadend = function () {\n        console.log(reader.result);\n      };\n\n      console.log(picture.type); // console.log(reader.readAsDataURL(picture));\n      // console.log(reader)\n      // console.log(\"pic\", picture)\n\n      this.setState({\n        pictures: this.state.pictures.concat(Buffer.from(picture))\n      });\n    };\n\n    this.fileChangedHandler = event => {\n      this.setState({\n        selectedFile: this.toBase64(event.target.files[0])\n      });\n    };\n\n    this.uploadHandler = () => {\n      console.log(this.state.selectedFile);\n      var data = btoa(this.state.selectedFile);\n      console.log('data is', data);\n    };\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      const newItem = {\n        name: this.state.name,\n        img: this.state.pictures[0]\n      }; // add item via add item action\n\n      this.props.addItem(newItem); // close modal\n\n      this.toggle();\n    };\n\n    this.state = {\n      modal: false,\n      name: '',\n      pictures: [],\n      selectedFile: null\n    };\n    this.onDrop = this.onDrop.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 5\n      }\n    }, this.props.isAuthenticated ? /*#__PURE__*/React.createElement(Button, {\n      color: \"dark\",\n      style: {\n        marginBottom: '2rem'\n      },\n      onClick: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }\n    }, \"Share your cut!\") : /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"mb-3 ml-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }\n    }, \"Feed\"), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }, \"Upload Post\"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      ref: \"file\",\n      type: \"file\",\n      name: \"file\",\n      className: \"upload-file\",\n      id: \"file\",\n      onChange: this.handleChangeImage,\n      encType: \"multipart/form-data\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 10\n      }\n    }, \"Description\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"name\",\n      id: \"item\",\n      placeholder: \"Clipper length, color, style, etc.\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      color: \"dark\",\n      style: {\n        marginTop: '2rem'\n      },\n      block: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 10\n      }\n    }, \"Post\"))))));\n  }\n\n}\n\nItemModal.propTypes = {\n  isAuthenticated: PropTypes.bool\n};\n\nconst mapStateToProps = state => ({\n  item: state.item,\n  isAuthenticated: state.auth.isAuthenticated\n});\n\nexport default connect(mapStateToProps, {\n  addItem\n})(ItemModal);","map":{"version":3,"sources":["/Users/michaeldu/FullStackTutorial/client/src/components/UploadPostModal.js"],"names":["React","Component","Button","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","Input","PropTypes","connect","addItem","fs","require","ItemModal","constructor","props","toggle","setState","modal","state","onDrop","picture","reader","FileReader","onloadend","console","log","result","type","pictures","concat","Buffer","from","fileChangedHandler","event","selectedFile","toBase64","target","files","uploadHandler","data","btoa","onChange","e","name","value","onSubmit","preventDefault","newItem","img","bind","render","isAuthenticated","marginBottom","handleChangeImage","marginTop","propTypes","bool","mapStateToProps","item","auth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    Form,\n    FormGroup, \n    Label,\n    Input\n} from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addItem } from '../actions/itemActions';\n// import ImageUploader from 'react-images-upload';\nconst fs = require('fs');\n\nclass ItemModal extends Component {\n\t\tconstructor(props) {\n\t\t\tsuper(props);\n\t\t\tthis.state = {\n\t\t\t\tmodal: false,\n\t\t\t\tname: '',\n\t\t\t\tpictures: [], \n\t\t\t\tselectedFile: null\n\t\t\t}\n\t\t\tthis.onDrop = this.onDrop.bind(this);\n\t\t}\n\t\t\n\t\tstatic propTypes = {\n\t\t\tisAuthenticated: PropTypes.bool\n\t\t}\n\n    toggle = () => {\n\t\t\tthis.setState({\n\t\t\t\t\tmodal: !this.state.modal\n\t\t\t});\n\t\t}\n\t\t\n\t\tonDrop = (picture) => {\n\t\t\tvar reader  = new FileReader();\n\n\t\t\treader.onloadend = function () {\n\t\t\t\tconsole.log(reader.result);\n\t\t\t}\n\t\t\tconsole.log(picture.type)\n\t\t\t// console.log(reader.readAsDataURL(picture));\n\t\t\t// console.log(reader)\n\t\t\t// console.log(\"pic\", picture)\n\t\t\tthis.setState({\n\t\t\t\tpictures: this.state.pictures.concat(Buffer.from(picture))\n\t\t\t});\n\t\t}\n\n\t\tfileChangedHandler = event => {\n\t\t\tthis.setState({ selectedFile: this.toBase64(event.target.files[0]) })\n\t\t}\n\t\t\n\t\tuploadHandler = () => {\n\t\t\tconsole.log(this.state.selectedFile)\n\t\t\tvar data = btoa(this.state.selectedFile);\n\t\t\tconsole.log('data is', data)\n\t\t}\n\n    onChange = (e) => {\n      this.setState({[e.target.name]: e.target.value})\n    }\n\n    onSubmit = (e) => {\n\t\t\te.preventDefault();\n\t\t\tconst newItem = {\n\t\t\t\t\tname: this.state.name,\n\t\t\t\t\timg: this.state.pictures[0]\n\t\t\t}\n\n\t\t\t// add item via add item action\n\t\t\tthis.props.addItem(newItem);\n\n\t\t\t// close modal\n\t\t\tthis.toggle();\n\t\t}\n\t\n    render(){\n\t\t\treturn(\n\t\t\t\t<div>\n\t\t\t\t\t{ this.props.isAuthenticated ? \t\t\t\t\t\n\t\t\t\t\t\t<Button color=\"dark\" style={{marginBottom: '2rem'}} onClick={this.toggle}> \n\t\t\t\t\t\t\tShare your cut!\n\t\t\t\t\t\t</Button> :\n\t\t\t\t\t\t<h4 className=\"mb-3 ml-4\">\n\t\t\t\t\t\t\tFeed\n\t\t\t\t\t\t</h4>\n\t\t\t\t\t}\n\n\t\t\t\t\t<Modal isOpen={this.state.modal} toggle={this.toggle} >\n\t\t\t\t\t\t<ModalHeader toggle={this.toggle}>Upload Post</ModalHeader>\n\t\t\t\t\t\t<ModalBody>\n\t\t\t\t\t\t<input ref=\"file\" type=\"file\" name=\"file\" \n                              className=\"upload-file\" \n                              id=\"file\"\n                              onChange={this.handleChangeImage}\n                              encType=\"multipart/form-data\" \n                              required/>\n\t\t\t\t\t\t\t{/* <input type=\"file\" accept=\"image/*\" ref={(domFileRef) => { this.uploadInput = domFileRef; }} />\n                <Button onClick={(event) => {\n\t\t\t\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\t\t\t\tif (this.uploadInput.files.length > 0) {\n\t\t\t\t\t\t\t\t\t\t\tconst domForm = new FormData();\n\t\t\t\t\t\t\t\t\t\t\tdomForm.append('uploadedphoto', this.uploadInput.files[0]);\n\t\t\t\t\t\t\t\t\t\t\tconsole.log(\"dorm form is\", domForm)\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\tAdd Photo\n                </Button> */}\n\t\t\t\t\t\t\t<Form onSubmit={this.onSubmit}>\n\t\t\t\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t\t\t\t<Label for=\"item\"> \n\t\t\t\t\t\t\t\t\t\tDescription\n\t\t\t\t\t\t\t\t\t</Label>\n\t\t\t\t\t\t\t\t\t<Input type=\"text\" name=\"name\" id=\"item\" placeholder=\"Clipper length, color, style, etc.\" onChange={this.onChange}/>\n\t\t\t\t\t\t\t\t\t<Button color=\"dark\" style={{marginTop: '2rem'}} block >\n\t\t\t\t\t\t\t\t\t\tPost\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t</ModalBody>\n\t\t\t\t\t</Modal>\n\t\t\t\t</div>\n\t\t\t);\n    }\n}\nconst mapStateToProps = state => ({\n\t\titem: state.item,\n\t\tisAuthenticated: state.auth.isAuthenticated\n})\n\nexport default connect(mapStateToProps, { addItem })(ItemModal)"]},"metadata":{},"sourceType":"module"}
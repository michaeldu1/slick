{"ast":null,"code":"var _jsxFileName = \"/Users/michaeldu/FullStackTutorial/client/src/components/auth/LoginModal.js\";\nimport React, { Component } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input, NavLink, Alert } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { login } from '../../actions/authActions';\nimport { clearErrors } from '../../actions/errorActions';\n\nclass LoginModal extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      modal: false,\n      email: '',\n      password: '',\n      msg: null\n    };\n\n    this.toggle = () => {\n      // Clear errors\n      this.props.clearErrors();\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      error,\n      isAuthenticated\n    } = this.props;\n\n    if (error !== prevProps.error) {\n      // Check for register error\n      if (error.id === 'LOGIN_FAIL') {\n        this.setState({\n          msg: error.msg.msg\n        });\n      } else {\n        this.setState({\n          msg: null\n        });\n      }\n    } // if authenticated close modal\n\n\n    if (this.state.modal) {\n      if (isAuthenticated) {\n        this.toggle();\n      }\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(NavLink, {\n      onClick: this.toggle,\n      href: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }, \"Login\"), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }\n    }, \"Login\"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }\n    }, this.state.msg ? /*#__PURE__*/React.createElement(Alert, {\n      color: \"danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 42\n      }\n    }, this.state.msg, \" \") : null, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 31\n      }\n    }, \"Email\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"email\",\n      name: \"email\",\n      id: \"email\",\n      placeholder: \"Email\",\n      className: \"mb-3\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 31\n      }\n    }), /*#__PURE__*/React.createElement(Label, {\n      for: \"password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 31\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"password\",\n      name: \"password\",\n      id: \"password\",\n      className: \"mb-3\",\n      placeholder: \"Password\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 31\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      color: \"dark\",\n      style: {\n        marginTop: '2rem'\n      },\n      block: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 31\n      }\n    }, \"Login\"))))));\n  }\n\n}\n\nLoginModal.propTypes = {\n  isAuthenticated: PropTypes.bool,\n  error: PropTypes.object.isRequired,\n  login: PropTypes.func.isRequired,\n  clearErrors: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  error: state.error\n});\n\nexport default connect(mapStateToProps, {\n  login,\n  clearErrors\n})(LoginModal);","map":{"version":3,"sources":["/Users/michaeldu/FullStackTutorial/client/src/components/auth/LoginModal.js"],"names":["React","Component","Button","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","Input","NavLink","Alert","connect","PropTypes","login","clearErrors","LoginModal","state","modal","email","password","msg","toggle","props","setState","onChange","e","target","name","value","onSubmit","preventDefault","componentDidUpdate","prevProps","error","isAuthenticated","id","render","marginTop","propTypes","bool","object","isRequired","func","mapStateToProps","auth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    Form,\n    FormGroup, \n    Label,\n    Input,\n    NavLink,\n    Alert\n} from 'reactstrap';\n\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { login } from '../../actions/authActions'\nimport { clearErrors } from '../../actions/errorActions'\n\n\nclass LoginModal extends Component {\n    state = {\n        modal: false,\n        email: '',\n        password: '',\n        msg: null\n    }\n\n    static propTypes = {\n      isAuthenticated: PropTypes.bool,\n      error: PropTypes.object.isRequired,\n      login: PropTypes.func.isRequired,\n      clearErrors: PropTypes.func.isRequired\n    }\n\n    componentDidUpdate(prevProps) {\n      const { error, isAuthenticated } = this.props;\n      if(error !== prevProps.error){\n        // Check for register error\n        if(error.id === 'LOGIN_FAIL'){\n          this.setState({ msg: error.msg.msg });\n        } else {\n          this.setState({ msg: null})\n        }\n      }\n\n      // if authenticated close modal\n      if(this.state.modal) {\n        if(isAuthenticated) {\n          this.toggle();\n        }\n      }\n    }\n\n    toggle = () => {\n      // Clear errors\n      this.props.clearErrors();\n\n      this.setState({\n          modal: !this.state.modal\n      });\n    }\n\n    onChange = (e) => {\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n    }\n\n    render(){\n        return(\n            <div>\n                <NavLink onClick={this.toggle} href=\"#\">\n                  Login\n                </NavLink>\n\n                <Modal isOpen={this.state.modal} toggle={this.toggle}>\n                    <ModalHeader toggle={this.toggle}>Login</ModalHeader>\n                    <ModalBody>\n                      { this.state.msg ? <Alert color=\"danger\">{ this.state.msg } </Alert> : null}\n                      <Form onSubmit={this.onSubmit}>\n                          <FormGroup>\n\n                              <Label for=\"email\">Email</Label>\n                              <Input \n                                  type=\"email\"\n                                  name=\"email\"\n                                  id=\"email\"\n                                  placeholder=\"Email\"\n                                  className=\"mb-3\"\n                                  onChange={this.onChange}\n                              />\n\n                              <Label for=\"password\">Password</Label>\n                              <Input \n                                  type=\"password\"\n                                  name=\"password\"\n                                  id=\"password\"\n                                  className=\"mb-3\"\n                                  placeholder=\"Password\"\n                                  onChange={this.onChange}\n                              />\n                              <Button color=\"dark\" style={{marginTop: '2rem'}} block> \n                                Login\n                              </Button>\n                          </FormGroup>\n                      </Form>\n                    </ModalBody>\n                </Modal>\n            </div>\n        );\n    }\n}\nconst mapStateToProps = state => ({\n    isAuthenticated: state.auth.isAuthenticated,\n    error: state.error\n})\n\nexport default connect(\n  mapStateToProps, { login, clearErrors }\n)(LoginModal);"]},"metadata":{},"sourceType":"module"}
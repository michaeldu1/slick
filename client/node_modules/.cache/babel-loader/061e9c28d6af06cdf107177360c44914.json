{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from \"./types\"; // Check token and load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  // User loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get('/api/auth/user', tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; // Register User\n\nexport const register = ({\n  name,\n  username,\n  email,\n  password\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    name,\n    username,\n    email,\n    password\n  });\n  axios.post('/api/users', body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n}; // Login User\n\nexport const login = ({\n  email,\n  password\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    email,\n    password,\n    username\n  });\n  axios.post('/api/auth', body, config).then(res => dispatch({\n    type: LOGIN_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n}; // Logout User\n\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n}; // Setup config/headers and token\n\nexport const tokenConfig = getState => {\n  // Get token from localstorage\n  const token = getState().auth.token; //Headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  };\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/Users/michaeldu/FullStackTutorial/client/src/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","name","username","email","password","config","headers","body","JSON","stringify","post","login","logout","token","auth"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport {\n  USER_LOADED,\n  USER_LOADING,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL\n} from \"./types\";\n\n// Check token and load user\nexport const loadUser = () => (dispatch, getState) => {\n  // User loading\n  dispatch({ type: USER_LOADING });\n\n  axios.get('/api/auth/user', tokenConfig(getState))\n    .then(res => dispatch ({\n      type: USER_LOADED,\n      payload: res.data\n    })) \n    .catch(err => { \n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: AUTH_ERROR\n      });\n    });\n}\n\n// Register User\nexport const register = ({ name, username, email, password}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  // Request body\n  const body = JSON.stringify({ name, username, email, password});\n\n  axios.post('/api/users', body, config)\n    .then(res => dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    }))\n    .catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n      dispatch({\n        type: REGISTER_FAIL\n      })\n    })\n}\n\n// Login User\nexport const login = ({ email, password }) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  // Request body\n  const body = JSON.stringify({ email, password, username});\n\n  axios.post('/api/auth', body, config)\n    .then(res => dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    }))\n    .catch(err => {\n      dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n      dispatch({\n        type: LOGIN_FAIL\n      })\n    })\n}\n\n\n// Logout User\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  }\n};\n\n// Setup config/headers and token\nexport const tokenConfig = getState => {\n    // Get token from localstorage\n    const token = getState().auth.token;\n\n    //Headers\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\"\n      }\n    }\n    if (token) {\n      config.headers['x-auth-token'] = token;\n    }\n\n    return config;\n}\n"]},"metadata":{},"sourceType":"module"}
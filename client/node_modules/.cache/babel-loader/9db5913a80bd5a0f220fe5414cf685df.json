{"ast":null,"code":"var _jsxFileName = \"/Users/michaeldu/FullStackTutorial/client/src/components/UploadPostModal.js\";\nimport React, { Component } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, Form, FormGroup, Label, Input } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addItem } from '../actions/itemActions'; // import ImageUploader from 'react-images-upload';\n\nclass ItemModal extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = () => {\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.fileChangedHandler = event => {\n      this.setState({\n        selectedFile: this.toBase64(event.target.files[0])\n      });\n    };\n\n    this.onChange = e => {\n      this.setState({\n        [e.target.name]: e.target.value\n      });\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      const newItem = {\n        name: this.state.name,\n        img: this.state.image\n      }; // add item via add item action\n\n      this.props.addItem(newItem); // close modal\n\n      this.toggle();\n    };\n\n    this.handleChangeImage = evt => {\n      console.log(\"Uploading\");\n      var self = this;\n      var reader = new FileReader();\n      var file = evt.target.files[0];\n\n      reader.onload = function (upload) {\n        self.setState({\n          image: upload.target.result\n        });\n      };\n\n      reader.readAsDataURL(file);\n      setTimeout(function () {\n        console.log(self.state.image);\n      }, 1000);\n    };\n\n    this.state = {\n      modal: false,\n      name: '',\n      image: null\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 5\n      }\n    }, this.props.isAuthenticated ? /*#__PURE__*/React.createElement(Button, {\n      color: \"dark\",\n      style: {\n        marginBottom: '2rem'\n      },\n      onClick: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 7\n      }\n    }, \"Share your cut!\") : /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"mb-3 ml-4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    }, \"Feed\"), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }\n    }, \"Upload Post\"), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      ref: \"file\",\n      type: \"file\",\n      name: \"file\",\n      className: \"upload-file\",\n      id: \"file\",\n      onChange: this.handleChangeImage,\n      encType: \"multipart/form-data\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 8\n      }\n    }), this.state.image ? /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.image,\n      width: \"100\",\n      height: \"100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 28\n      }\n    }) : null, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 10\n      }\n    }, \"Description\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"name\",\n      id: \"item\",\n      placeholder: \"Clipper length, color, style, etc.\",\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 10\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      color: \"dark\",\n      style: {\n        marginTop: '2rem'\n      },\n      block: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 10\n      }\n    }, \"Post\"))))));\n  }\n\n}\n\nItemModal.propTypes = {\n  isAuthenticated: PropTypes.bool\n};\n\nconst mapStateToProps = state => ({\n  item: state.item,\n  isAuthenticated: state.auth.isAuthenticated\n});\n\nexport default connect(mapStateToProps, {\n  addItem\n})(ItemModal);","map":{"version":3,"sources":["/Users/michaeldu/FullStackTutorial/client/src/components/UploadPostModal.js"],"names":["React","Component","Button","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","Input","PropTypes","connect","addItem","ItemModal","constructor","props","toggle","setState","modal","state","fileChangedHandler","event","selectedFile","toBase64","target","files","onChange","e","name","value","onSubmit","preventDefault","newItem","img","image","handleChangeImage","evt","console","log","self","reader","FileReader","file","onload","upload","result","readAsDataURL","setTimeout","render","isAuthenticated","marginBottom","marginTop","propTypes","bool","mapStateToProps","item","auth"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SACIC,MADJ,EAEIC,KAFJ,EAGIC,WAHJ,EAIIC,SAJJ,EAKIC,IALJ,EAMIC,SANJ,EAOIC,KAPJ,EAQIC,KARJ,QASO,YATP;AAUA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,wBAAxB,C,CACA;;AAEA,MAAMC,SAAN,SAAwBZ,SAAxB,CAAkC;AAChCa,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;;AADkB,SAajBC,MAbiB,GAaR,MAAM;AAChB,WAAKC,QAAL,CAAc;AACZC,QAAAA,KAAK,EAAE,CAAC,KAAKC,KAAL,CAAWD;AADP,OAAd;AAGA,KAjBkB;;AAAA,SAoBnBE,kBApBmB,GAoBEC,KAAK,IAAI;AAC7B,WAAKJ,QAAL,CAAc;AAAEK,QAAAA,YAAY,EAAE,KAAKC,QAAL,CAAcF,KAAK,CAACG,MAAN,CAAaC,KAAb,CAAmB,CAAnB,CAAd;AAAhB,OAAd;AACA,KAtBkB;;AAAA,SAwBjBC,QAxBiB,GAwBLC,CAAD,IAAO;AAChB,WAAKV,QAAL,CAAc;AAAC,SAACU,CAAC,CAACH,MAAF,CAASI,IAAV,GAAiBD,CAAC,CAACH,MAAF,CAASK;AAA3B,OAAd;AACD,KA1BgB;;AAAA,SA4BjBC,QA5BiB,GA4BLH,CAAD,IAAO;AACnBA,MAAAA,CAAC,CAACI,cAAF;AACA,YAAMC,OAAO,GAAG;AACdJ,QAAAA,IAAI,EAAE,KAAKT,KAAL,CAAWS,IADH;AAEdK,QAAAA,GAAG,EAAE,KAAKd,KAAL,CAAWe;AAFF,OAAhB,CAFmB,CAOnB;;AACA,WAAKnB,KAAL,CAAWH,OAAX,CAAmBoB,OAAnB,EARmB,CAUnB;;AACA,WAAKhB,MAAL;AACA,KAxCkB;;AAAA,SA0CnBmB,iBA1CmB,GA0CEC,GAAD,IAAS;AAC5BC,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACA,UAAIC,IAAI,GAAG,IAAX;AACA,UAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb;AACA,UAAIC,IAAI,GAAGN,GAAG,CAACZ,MAAJ,CAAWC,KAAX,CAAiB,CAAjB,CAAX;;AAEAe,MAAAA,MAAM,CAACG,MAAP,GAAgB,UAASC,MAAT,EAAiB;AAChCL,QAAAA,IAAI,CAACtB,QAAL,CAAc;AACZiB,UAAAA,KAAK,EAAEU,MAAM,CAACpB,MAAP,CAAcqB;AADT,SAAd;AAGA,OAJD;;AAKAL,MAAAA,MAAM,CAACM,aAAP,CAAqBJ,IAArB;AACAK,MAAAA,UAAU,CAAC,YAAW;AACrBV,QAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACpB,KAAL,CAAWe,KAAvB;AACA,OAFS,EAEP,IAFO,CAAV;AAGA,KAzDkB;;AAElB,SAAKf,KAAL,GAAa;AACZD,MAAAA,KAAK,EAAE,KADK;AAEZU,MAAAA,IAAI,EAAE,EAFM;AAGZM,MAAAA,KAAK,EAAE;AAHK,KAAb;AAKA;;AAoDCc,EAAAA,MAAM,GAAE;AACT,wBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKjC,KAAL,CAAWkC,eAAX,gBACD,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,MAAd;AAAqB,MAAA,KAAK,EAAE;AAACC,QAAAA,YAAY,EAAE;AAAf,OAA5B;AAAoD,MAAA,OAAO,EAAE,KAAKlC,MAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADC,gBAID;AAAI,MAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAUC,oBAAC,KAAD;AAAO,MAAA,MAAM,EAAE,KAAKG,KAAL,CAAWD,KAA1B;AAAiC,MAAA,MAAM,EAAE,KAAKF,MAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,WAAD;AAAa,MAAA,MAAM,EAAE,KAAKA,MAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADD,eAEC,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAO,MAAA,GAAG,EAAC,MAAX;AAAkB,MAAA,IAAI,EAAC,MAAvB;AAA8B,MAAA,IAAI,EAAC,MAAnC;AACC,MAAA,SAAS,EAAC,aADX;AAEC,MAAA,EAAE,EAAC,MAFJ;AAGC,MAAA,QAAQ,EAAE,KAAKmB,iBAHhB;AAIC,MAAA,OAAO,EAAC,qBAJT;AAKC,MAAA,QAAQ,MALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,EAQE,KAAKhB,KAAL,CAAWe,KAAX,gBAAmB;AAAK,MAAA,GAAG,EAAE,KAAKf,KAAL,CAAWe,KAArB;AAA4B,MAAA,KAAK,EAAC,KAAlC;AAAwC,MAAA,MAAM,EAAC,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAnB,GAA4E,IAR9E,eASC,oBAAC,IAAD;AAAM,MAAA,QAAQ,EAAE,KAAKJ,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADD,eAIC,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,MAAxB;AAA+B,MAAA,EAAE,EAAC,MAAlC;AAAyC,MAAA,WAAW,EAAC,oCAArD;AAA0F,MAAA,QAAQ,EAAE,KAAKJ,QAAzG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJD,eAKC,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,MAAd;AAAqB,MAAA,KAAK,EAAE;AAACyB,QAAAA,SAAS,EAAE;AAAZ,OAA5B;AAAiD,MAAA,KAAK,MAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALD,CADD,CATD,CAFD,CAVD,CADD;AAqCE;;AAlG6B;;AAA5BtC,S,CAUGuC,S,GAAY;AAClBH,EAAAA,eAAe,EAAEvC,SAAS,CAAC2C;AADT,C;;AA0FrB,MAAMC,eAAe,GAAGnC,KAAK,KAAK;AAChCoC,EAAAA,IAAI,EAAEpC,KAAK,CAACoC,IADoB;AAEhCN,EAAAA,eAAe,EAAE9B,KAAK,CAACqC,IAAN,CAAWP;AAFI,CAAL,CAA7B;;AAKA,eAAetC,OAAO,CAAC2C,eAAD,EAAkB;AAAE1C,EAAAA;AAAF,CAAlB,CAAP,CAAsCC,SAAtC,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport {\n    Button,\n    Modal,\n    ModalHeader,\n    ModalBody,\n    Form,\n    FormGroup, \n    Label,\n    Input\n} from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addItem } from '../actions/itemActions';\n// import ImageUploader from 'react-images-upload';\n\nclass ItemModal extends Component {\n\t\tconstructor(props) {\n\t\t\tsuper(props);\n\t\t\tthis.state = {\n\t\t\t\tmodal: false,\n\t\t\t\tname: '',\n\t\t\t\timage: null\n\t\t\t}\n\t\t}\n\t\t\n\t\tstatic propTypes = {\n\t\t\tisAuthenticated: PropTypes.bool\n\t\t}\n\n    toggle = () => {\n\t\t\tthis.setState({\n\t\t\t\t\tmodal: !this.state.modal\n\t\t\t});\n\t\t}\n\t\t\n\n\t\tfileChangedHandler = event => {\n\t\t\tthis.setState({ selectedFile: this.toBase64(event.target.files[0]) })\n\t\t}\n\n    onChange = (e) => {\n      this.setState({[e.target.name]: e.target.value})\n    }\n\n    onSubmit = (e) => {\n\t\t\te.preventDefault();\n\t\t\tconst newItem = {\n\t\t\t\t\tname: this.state.name,\n\t\t\t\t\timg: this.state.image, \n\t\t\t}\n\n\t\t\t// add item via add item action\n\t\t\tthis.props.addItem(newItem);\n\n\t\t\t// close modal\n\t\t\tthis.toggle();\n\t\t}\n\n\t\thandleChangeImage = (evt) => {\n\t\t\tconsole.log(\"Uploading\");\n\t\t\tvar self = this;\n\t\t\tvar reader = new FileReader();\n\t\t\tvar file = evt.target.files[0];\n\t\n\t\t\treader.onload = function(upload) {\n\t\t\t\tself.setState({\n\t\t\t\t\t\timage: upload.target.result\n\t\t\t\t});\n\t\t\t};\n\t\t\treader.readAsDataURL(file);    \n\t\t\tsetTimeout(function() {\n\t\t\t\tconsole.log(self.state.image);\n\t\t\t}, 1000);\n\t\t}\n\t\n    render(){\n\t\t\treturn(\n\t\t\t\t<div>\n\t\t\t\t\t{ this.props.isAuthenticated ? \t\t\t\t\t\n\t\t\t\t\t\t<Button color=\"dark\" style={{marginBottom: '2rem'}} onClick={this.toggle}> \n\t\t\t\t\t\t\tShare your cut!\n\t\t\t\t\t\t</Button> :\n\t\t\t\t\t\t<h4 className=\"mb-3 ml-4\">\n\t\t\t\t\t\t\tFeed\n\t\t\t\t\t\t</h4>\n\t\t\t\t\t}\n\n\t\t\t\t\t<Modal isOpen={this.state.modal} toggle={this.toggle} >\n\t\t\t\t\t\t<ModalHeader toggle={this.toggle}>Upload Post</ModalHeader>\n\t\t\t\t\t\t<ModalBody>\n\t\t\t\t\t\t\t<input ref=\"file\" type=\"file\" name=\"file\" \n\t\t\t\t\t\t\t\tclassName=\"upload-file\" \n\t\t\t\t\t\t\t\tid=\"file\"\n\t\t\t\t\t\t\t\tonChange={this.handleChangeImage}\n\t\t\t\t\t\t\t\tencType=\"multipart/form-data\" \n\t\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{this.state.image ? <img src={this.state.image} width=\"100\" height=\"100\"/> : null}\n\t\t\t\t\t\t\t<Form onSubmit={this.onSubmit}>\n\t\t\t\t\t\t\t\t<FormGroup>\n\t\t\t\t\t\t\t\t\t<Label for=\"item\"> \n\t\t\t\t\t\t\t\t\t\tDescription\n\t\t\t\t\t\t\t\t\t</Label>\n\t\t\t\t\t\t\t\t\t<Input type=\"text\" name=\"name\" id=\"item\" placeholder=\"Clipper length, color, style, etc.\" onChange={this.onChange}/>\n\t\t\t\t\t\t\t\t\t<Button color=\"dark\" style={{marginTop: '2rem'}} block >\n\t\t\t\t\t\t\t\t\t\tPost\n\t\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t</ModalBody>\n\t\t\t\t\t</Modal>\n\t\t\t\t</div>\n\t\t\t);\n    }\n}\nconst mapStateToProps = state => ({\n\t\titem: state.item,\n\t\tisAuthenticated: state.auth.isAuthenticated\n})\n\nexport default connect(mapStateToProps, { addItem })(ItemModal)"]},"metadata":{},"sourceType":"module"}